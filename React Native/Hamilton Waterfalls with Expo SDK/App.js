import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  StyleSheet,
  Dimensions,
  TextInput,
  Text,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import MapView, { Marker, Callout } from 'react-native-maps';
import * as Location from 'expo-location'; //  Location from Expo
import waterfallsData from './components/waterfalls';
import * as Linking from 'expo-linking';
import { Platform } from 'react-native';

const App = () => {
  const [markers, setMarkers] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [favorites, setFavorites] = useState([]);
  const [userLocation, setUserLocation] = useState();
  const mapRef = useRef(null);

  // getting the device width
  const aspectRatio =
    Dimensions.get('window').width / Dimensions.get('window').height;
  const longitudeDelta = 0.1 * aspectRatio;

  //Get the users currrent Location
  const getUserLocation = async () => {
    try {
      // getting the status of fetching the location
      // Used "expo-Location"
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        console.error('Permission to access location was denied');
        return;
      }
      //set the users current location 
      let location = await Location.getCurrentPositionAsync({});
      setUserLocation(location.coords);
    } catch (error) {
      console.error('Error fetching location: ', error);
    }
  };

  // get the users location on page load
  useEffect(() => {
    getUserLocation();
  }, []);

  // Got the calculation generated by ChatGPT.
  const showNearbyWaterfalls = async () => {
    const thresholdDistance = 3000; // 3 kilometers in meters

    if (userLocation) {
      const nearbyMarkers = markers.filter((marker) => {
        const R = 6371e3; // Earth's radius in meters
        const lat1 = marker.latlng.latitude * (Math.PI / 180);
        const lon1 = marker.latlng.longitude * (Math.PI / 180);
        const lat2 = userLocation.latitude * (Math.PI / 180);
        const lon2 = userLocation.longitude * (Math.PI / 180);

        const dLat = lat2 - lat1;
        const dLon = lon2 - lon1;

        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(lat1) *
          Math.cos(lat2) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const distance = R * c; // Distance in meters

        return distance <= thresholdDistance;
      });

      setMarkers(nearbyMarkers);

      // focus the marker on the map.
      if (nearbyMarkers.length > 0) {
        const centerLocation = {
          latitude: userLocation.latitude,
          longitude: userLocation.longitude,
          latitudeDelta: 0.1,
          longitudeDelta: longitudeDelta,
        };
        mapRef.current.animateToRegion(centerLocation, 1000);
      }
    }
  };


  // toggling the favourites.
  const toggleFavorite = (id) => {
    const updatedMarkers = markers.map((marker) =>
      marker.id === id ? { ...marker, isFavorite: !marker.isFavorite } : marker
    );
    setMarkers(updatedMarkers);

    //check and updates the favourite list
    const isFavorite = favorites.includes(id);
    if (isFavorite) {
      const updatedFavorites = favorites.filter((favorite) => favorite !== id);
      setFavorites(updatedFavorites);
    } else {
      setFavorites([...favorites, id]);
    }
  };

  //useEffect when searchtext is updated
  useEffect(() => {
    const filteredMarkers = waterfallsData.filter((waterfall) =>
      waterfall.NAME.toLowerCase().includes(searchText.toLowerCase())
    );

    const updatedMarkers = filteredMarkers.map((waterfall) => ({
      id: waterfall.OBJECTID,
      latlng: {
        latitude: waterfall.LATITUDE,
        longitude: waterfall.LONGITUDE,
      },
      title: waterfall.NAME,
      description: `
    Height: ${waterfall.HEIGHT_IN_M} meters
    Width: ${waterfall.WIDTH_IN_M} meters
    Ranking: ${waterfall.RANKING}
  `,
      isFavorite: favorites.includes(waterfall.OBJECTID),
    }));

    setMarkers(updatedMarkers);

    if (filteredMarkers.length > 0) {
      const firstMatch = filteredMarkers[0];
      const matchLocation = {
        latitude: firstMatch.LATITUDE,
        longitude: firstMatch.LONGITUDE,
        latitudeDelta: 0.1,
        longitudeDelta: longitudeDelta,
      };
      mapRef.current.animateToRegion(matchLocation, 1000);
    }
  }, [searchText]);

  //Handle Search
  const handleSearch = (text) => {
    setSearchText(text);
  };
  //Show all the waterfalls
  const showAllWaterfalls = () => {
    const initialMarkers = waterfallsData.map((waterfall) => ({
      id: waterfall.OBJECTID,
      latlng: {
        latitude: waterfall.LATITUDE,
        longitude: waterfall.LONGITUDE,
      },
      title: waterfall.NAME,
      description: `
    Height: ${waterfall.HEIGHT_IN_M} meters
    Width: ${waterfall.WIDTH_IN_M} meters
    Ranking: ${waterfall.RANKING}
  `,
      isFavorite: favorites.includes(waterfall.OBJECTID),
    }));
    setMarkers(initialMarkers);
    //focus on the marker
    if (initialMarkers.length > 0) {
      const firstMatch = initialMarkers[0];
      const matchLocation = {
        latitude: firstMatch.latlng.latitude,
        longitude: firstMatch.latlng.longitude,
        latitudeDelta: 0.1,
        longitudeDelta: longitudeDelta,
      };
      mapRef.current.animateToRegion(matchLocation, 1000);
    }
  };

  //get the directions by redirecting from this app to map.
  // used expo linking
  const getDirections = (location) => {
    const { latitude, longitude } = location;
    const url = Platform.select({
      ios: `maps://app?saddr=${userLocation.latitude},${userLocation.longitude}&daddr=${latitude},${longitude}`,
      android: `google.navigation:q=${latitude},${longitude}`,
    });

    Linking.openURL(url);
  };

  return (
    <View style={appStyles.container}>
      <Text style={appStyles.title}>Waterfall Explorer</Text>
      <View style={appStyles.searchContainer}>
        <TextInput
          style={appStyles.searchInput}
          placeholder="Search for a waterfall"
          onChangeText={handleSearch}
          value={searchText}
        />
        <TouchableOpacity onPress={showNearbyWaterfalls}>
          <Text style={appStyles.nearbyButton}>Show Nearby Waterfalls</Text>
        </TouchableOpacity>
      </View>
      <View style={appStyles.mapContainer}>
        <MapView
          ref={mapRef}
          style={appStyles.map}
          initialRegion={{
            latitude: 43.2557,
            longitude: -79.8711,
            latitudeDelta: 0.1,
            longitudeDelta: longitudeDelta,
          }}>
          {markers.map((marker) => (
            <Marker
              key={marker.id}
              coordinate={marker.latlng}
              title={marker.title}
              pinColor={marker.isFavorite ? 'red' : 'blue'}
            >
              <Callout tooltip={true}>
                <View style={appStyles.calloutContainer}>
                  <Text style={appStyles.calloutTitle}>{marker.title}</Text>
                  <Text style={appStyles.calloutDescription}>
                    {marker.description}
                  </Text>
                  <TouchableOpacity onPress={() => toggleFavorite(marker.id)}>
                    <Text style={appStyles.favoriteButton}>
                      {marker.isFavorite
                        ? 'Remove from Favorites'
                        : 'Add to Favorites'}
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    onPress={() => getDirections(marker.latlng)}>
                    <Text style={appStyles.directionsButton}>
                      Get Directions
                    </Text>
                  </TouchableOpacity>
                </View>
              </Callout>

            </Marker>
          ))}
        </MapView>
      </View>
      <ScrollView style={appStyles.favoriteContainer}>
        <Text style={appStyles.favoriteTitle}>Favorite Waterfalls</Text>
        {markers
          .filter((marker) => favorites.includes(marker.id))
          .map((marker) => (
            <View key={marker.id} style={appStyles.favoriteItem}>
              <Text>{marker.title}</Text>
              <TouchableOpacity onPress={() => toggleFavorite(marker.id)}>
                <Text style={appStyles.favoriteButton}>
                  {marker.isFavorite ? 'Remove' : 'Add'}
                </Text>
              </TouchableOpacity>
            </View>
          ))}
        {favorites.length === 0 && <Text>No favorite waterfalls yet!</Text>}
      </ScrollView>
      <TouchableOpacity onPress={showAllWaterfalls}>
        <Text style={appStyles.nearbyButton}>Show All Waterfalls</Text>
      </TouchableOpacity>
    </View>
  );
};
//Styles for the app.
const appStyles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f0f0f0',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 20,
    color: 'blue',
  },
  searchContainer: {
    width: '90%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  searchInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    paddingVertical: 12,
    paddingHorizontal: 15,
    marginRight: 10,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  nearbyButton: {
    backgroundColor: 'blue',
    color: 'white',
    paddingVertical: 12,
    paddingHorizontal: 15,
    borderRadius: 10,
    fontSize: 16,
    fontWeight: 'bold',
  },
  mapContainer: {
    width: '90%',
    height: '50%',
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 20,
  },
  map: {
    flex: 1,
  },
  favoriteContainer: {
    width: '90%',
    maxHeight: '20%',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 15,
    padding: 15,
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  favoriteTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    color: 'blue',
  },
  favoriteItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  favoriteButton: {
    color: 'blue',
    fontSize: 16,
    fontWeight: 'bold',
  },
  calloutContainer: {
    width: 250,
    padding: 15,
    borderRadius: 15,
    backgroundColor: '#fff',
    elevation: 6,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
  },
  calloutTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: 'blue',
  },
  calloutDescription: {
    fontSize: 14,
    lineHeight: 20,
    color: '#333',
  },
  directionsButton: {
    color: 'blue',
    fontSize: 16,
    marginTop: 8,
    fontWeight: 'bold',
  },
});

export default App;
